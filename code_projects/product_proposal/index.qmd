---
title: "Product Proposal"
code-fold: true
author: "Boon Chin Look"
categories: [Python]
image: "/code_projects/product_proposal/proposal.jpg"
date: '2025-04-11'

about:
  template: solana
  links:
    - icon: file-earmark-pdf
      text: Product proposal report pdf
      href: code_projects/product_proposal/individual_report.pdf
      target: _blank
---
This project consisted of group and individual elements. 

Within the group side we agreed on a product idea and found a dataset related to our product idea, we had to pitch our product in the form of a video presentation which is embedded within the first page of our pdf of our individual report. This had to be an application for students with finance, innovation and entriprise elements.

Within the individual side we had to write the main technicialities about our pitch such as the data analysis, the gap within the market, our customers and how we'll sell our product. We could have shared elements within the group, however we'd to have our own touches too within the assignment.

Below are the main snipets of code that aided our teamsdecisions for identifying the gap within the market:

# Importing Data and Intial Analysis
```{python}
#| code-summary: Importing librarys
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import seaborn as sns
```

```{python}
#| code-summary: Importing dataset 
df = pd.read_csv("UberDataset.csv")
df.head()
```

```{python}
#| code-summary: Looking at data types of columns
df.info()
```

```{python}
#| code-summary: Standardize column names to lowercase for consistency
df.columns = df.columns.str.lower()
df.head()
```

```{python}
#| code-summary: Checking for missing values in the dataset
df.isnull().sum()
#no missing values found
```

```{python}
#| code-summary: Simple descriptive statistics of each numerical column
df.describe()
```

# Data Cleaning
```{python}
#| code-summary: Checked & removed duplicates
duplicated_data = df[df.duplicated()]
print(duplicated_data.shape)

df = df.drop_duplicates(keep='first')
```

```{python}
#| code-summary: Encode categorical variables using one-hot encoding
data_encoded = pd.get_dummies(df, columns=['category', 'purpose'], drop_first=True)
```

```{python}
#| code-summary: Converted date columns into date time
df["start_date"] = pd.to_datetime(df["start_date"], errors="coerce")
df["end_date"] = pd.to_datetime(df["end_date"], errors="coerce")
```

```{python}
#| code-summary: Handling missing values
# Handle missing values by dropping rows with missing 'start' or 'stop' and filling 'purpose' with 'unknown'
df.dropna(subset=['start', 'stop'], inplace=True)
df['purpose'] = df['purpose'].fillna("Unknown") 
```


```{python}
#| code-summary: Feature engineering, created new column for trip date
df["date"] = df["start_date"].dt.date
```

```{python}
#| code-summary: Ensured the dataset is sorted by date
df = df.sort_values('start_date')
df.set_index('start_date', inplace=True)
```

# Analysis

```{python}
#| code-summary: Returns first few rows of dataset to check
df.head()
```

```{python}
#| code-summary: Plot trip frequency over time plot code
plt.figure(figsize=(11, 7))
sns.lineplot(x=df["date"].value_counts().sort_index().index,
             y=df["date"].value_counts().sort_index().values, marker="o")
plt.xlabel("date")
plt.ylabel("Number of Trips")
plt.title("Uber Trips Over Time")
plt.xticks(rotation=45)
plt.show()
```

```{python}
#| code-summary: Top 10 most common pickup and drop-off locations plot code
top_pickups = df["start"].value_counts().head(10)
top_dropoffs = df["stop"].value_counts().head(10)

fig, axes = plt.subplots(1, 2, figsize=(9, 3))

sns.barplot(x=top_pickups.values, y=top_pickups.index, ax=axes[0], palette="Blues_r", hue=top_pickups.index, dodge=False)  
axes[0].set_title("Top 10 Pickup Locations")
axes[0].set_xlabel("Number of Trips")
axes[0].legend([],[], frameon=False)  
sns.barplot(x=top_dropoffs.values, y=top_dropoffs.index, ax=axes[1], palette="Greens_r", hue=top_dropoffs.index, dodge=False)
axes[1].set_title("Top 10 Drop-off Locations")
axes[1].set_xlabel("Number of Trips")
axes[1].legend([],[], frameon=False) 

plt.tight_layout()
plt.show()
```

```{python}
#| code-summary: code for plot of count of trips by purpose 
trip_purpose_counts = df["purpose"].value_counts()
plt.figure(figsize=(9, 5))
sns.barplot(x=trip_purpose_counts.index, y=trip_purpose_counts.values, hue=trip_purpose_counts.index, palette="Oranges", legend=False) 
plt.xlabel("Purpose of Trip")
plt.ylabel("Number of Trips")
plt.title("Trip Purpose Distribution")
plt.xticks(rotation=45)
plt.show()

#Main purpose isn't known but second is a meeting which could be relative to commuting with commuting having little, below we see it has the highest average distance by purpose, which backs up our product in relation a student carpooling application which would aid in their commute.
```

```{python}
#| code-summary: code for plot of average trip distance by purpose
avg_miles_purpose = df.groupby("purpose")["miles"].mean().sort_values()
plt.figure(figsize=(9, 5))
sns.barplot(x=avg_miles_purpose.index, y=avg_miles_purpose.values, hue=avg_miles_purpose.index, dodge=False, palette="Blues", legend=False)  
plt.xlabel("Purpose of Trip")
plt.ylabel("Average Miles Traveled")
plt.title("Average Trip Distance by Purpose")
plt.xticks(rotation=45)
plt.show()
```

```{python}
#| code-summary: Plot for hourly trip analysis of the day
df["hour"] = df.index.hour
plt.figure(figsize=(9, 5))
sns.countplot(x=df["hour"], hue=df["hour"], dodge=False, palette="coolwarm", legend=False) 
plt.xlabel("Hour of the Day")
plt.ylabel("Number of Trips")
plt.title("Trips by Hour of the Day")
plt.show()
#hours align similarly with college hours.
```

```{python}
#| code-summary: Code for plot of Trip category to number of trips distribution
plt.figure(figsize=(9, 5))
sns.countplot(x=df["category"], hue=df["category"], palette="viridis", legend=False)
plt.xlabel("Trip Category")
plt.ylabel("Number of Trips")
plt.title("Business vs Personal Trips")
plt.show()
```